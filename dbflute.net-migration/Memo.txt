# ========================================================================================
#                                                                              その他メモ
#                                                                              ===========
# -------------------------------------------------------------
#                            javaパッケージにはない共通処理など
#                           -----------------------------------
名前空間「DBFluteRuntime.JavaLike.Helper」下に作成

# ------------------------------------------------------------
#                         Stringクラスのstaticメソッドについて
#                                        (valueOfメソッドなど)
#                         ------------------------------------
名前空間「DBFluteRuntime.JavaLike.Helper.StringHelper」下に実装
「String.XXX」となっている箇所は「StringHelper.XXX」に変換する必要あり
下記理由のため
    staticなので拡張メソッドが使えない
    別名前空間のStringクラス作成は最も使われるであろうC#文字列型とクラス名が重複する
    （名前空間が別なので共存はできるが、どちらかはusingを使わずフルネームで型を
    　書く必要がでてくる）

# -------------------------------------------------------------
#                            数値型に変換するメソッドについて
#                                               (intValueなど)
#                           -----------------------------------
DBFluteRuntime.JavaLike.Lang.NullableExtensionクラスに拡張メソッドとしてまとめて実装

# -------------------------------------------------------------
#                                  予約語と被っているキーワード
#                                  ----------------------------
・XXX.class ⇒ 予約後「class」と被る ⇒ getType()に変換する必要あり？
・Field#set/get ⇒ プロパティのset/getキーワードと被る ⇒ setValue / getValueメソッドに変換？

# -------------------------------------------------------------
#                                      Genericsのワイルドカード
#                                      ------------------------
1:1で対応するC#のキーワードがないので下記の変換が必要
・Class<?> -> System.Type
・その他 -> ? -> T などのGenerics型名

# -------------------------------------------------------------
#                                      別名の定義＆拡張メソッド
#                                     -------------------------
Adapterの形でjavalikeクラスを作成した場合、
変換が発生する度に内部でAdapterインスタンスをnewする必要があるため、
塵も積もればでパフォーマンスなどに影響が出る懸念がある。
↓
C#ではusing句を使って別名定義ができるため、例えばjavaのMethodクラスを
C#上で表現する場合、下記の変換・拡張を行えばAdapterなしで再現可能となる。
また、getClass().getName()のような戻り値からそのままメソッド呼び出しをしている
コードにも対応することができる。

<変換> ( CSharpUsingNamespaceBuilder#doBuildMappingUsingClause で実行？ )
[Java]import java.lang.reflect.Method;
↓
[C#]  using Method = System.Refrection.MethodInfo;

<拡張>
getNameなどのjavaメソッドを[C#]MethodInfoの拡張メソッドとして定義

（とりあえずリフレクション系はそれでいけそう）

○変換リスト(左：[java]import文 右：[C#]using文）
java.lang.reflect.Method -> Method = System.Refection.MethodInfo
java.lang.reflect.Field -> Field = System.Refection.FieldInfo
java.lang.reflect.Constructor -> Constructor = System.Refection.ConstructorInfo

（例外クラスもAdapterや継承では同等の例外をcatchできないため、別名定義が必要）
　　※dbflute-runtime下でcatchされているmade in dbfluteではない例外が対象
java.lang.NumberFormatExceptionn -> NumberFormatException = System.FormatException
java.lang.InstantiationException -> InstantiationException = System.TypeLoadException
java.lang.IllegalAccessException -> IllegalAccessException = System.SecurityException
java.lang.NoSuchMethodException -> NoSuchMethodException = System.MissingMethodException
java.lang.RuntimeException -> RuntimeException = System.Exception
java.lang.ClassCastException -> ClassCastException = System.InvalidCastException
java.lang.Throwable -> Throwable = System.Exception
java.lang.InterruptedException -> InterruptedException = System.Threading.ThreadInterruptedException
java.lang.IndexOutOfBoundsException -> IndexOutOfBoundsException = System.IndexOutOfRangeException
java.lang.reflect.InvocationTargetException -> InvocationTargetException = System.Reflection.TargetInvocationException
java.lang.ClassNotFoundException -> ClassNotFoundException = System.TypeLoadException
java.lang.Exception -> System.Exception
java.lang.SecurityException -> System.Security.SecurityException

java.text.ParseException -> ParseException = System.FormatException

java.util.concurrent.ExecutionException -> ExecutionException = System.Threading.ThreadStartException

java.sql.SQLException -> SQLException = System.Data.SqlClient.SqlException
  -> SQLException = System.Data.Common.DbException
　　※SqlExceptionはSQLServer用のため親クラスのDbExceptionの方を対象

java.io.IOException -> System.IO.IOException
java.io.FileNotFoundException -> System.IO.FileNotFoundException
java.io.ByteArrayInputStream -> System.IO.MemoryStream
java.io.BufferedReader -> System.IO.StreamReader
java.io.UnsupportedEncodingException = UnsupportedEncodingException -> System.ArgumentException

# --------------------------------------------------------------
#                                                         その他
#                                                         ------
org.apache下の変換クラスはどこに置くか

System.Data.Common.DbDataAdapter (IDbDataAdapter : DataSource のようなもの？)
System.Data.IDbCommand (PrepareStatmentのようなもの？)
